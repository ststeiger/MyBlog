
namespace Dapper.Contrib
{


    class pg_specific
    {

        internal static System.Collections.Generic.HashSet<string> ReservedKeywords = GetReservedKeywords();
        internal static System.Collections.Generic.HashSet<string> CurrentKeywords = GetCurrentKeywords();
        internal static System.Collections.Generic.HashSet<string> OdbcKeywords = GetOdbcKeywords();
        internal static System.Collections.Generic.HashSet<string> FutureKeywords = GetFutureKeywords();


        // https://www.postgresql.org/docs/devel/sql-keywords-appendix.html
        internal static System.Collections.Generic.HashSet<string> GetReservedKeywords()
        {
            System.Collections.Generic.HashSet<string> hs = 
                new System.Collections.Generic.HashSet<string>(System.StringComparer.InvariantCultureIgnoreCase);

            hs.Add("ABORT");
            hs.Add("ABS");
            hs.Add("ABSENT");
            hs.Add("ABSOLUTE");
            hs.Add("ACCESS");
            hs.Add("ACCORDING");
            hs.Add("ACOS");
            hs.Add("ACTION");
            hs.Add("ADA");
            hs.Add("ADD");
            hs.Add("ADMIN");
            hs.Add("AFTER");
            hs.Add("AGGREGATE");
            hs.Add("ALL");
            hs.Add("ALLOCATE");
            hs.Add("ALSO");
            hs.Add("ALTER");
            hs.Add("ALWAYS");
            hs.Add("ANALYSE");
            hs.Add("ANALYZE");
            hs.Add("AND");
            hs.Add("ANY");
            hs.Add("ARE");
            hs.Add("ARRAY");
            hs.Add("ARRAY_AGG");
            hs.Add("ARRAY_​MAX_​CARDINALITY");
            hs.Add("AS");
            hs.Add("ASC");
            hs.Add("ASENSITIVE");
            hs.Add("ASIN");
            hs.Add("ASSERTION");
            hs.Add("ASSIGNMENT");
            hs.Add("ASYMMETRIC");
            hs.Add("AT");
            hs.Add("ATAN");
            hs.Add("ATOMIC");
            hs.Add("ATTACH");
            hs.Add("ATTRIBUTE");
            hs.Add("ATTRIBUTES");
            hs.Add("AUTHORIZATION");
            hs.Add("AVG");
            hs.Add("BACKWARD");
            hs.Add("BASE64");
            hs.Add("BEFORE");
            hs.Add("BEGIN");
            hs.Add("BEGIN_FRAME");
            hs.Add("BEGIN_PARTITION");
            hs.Add("BERNOULLI");
            hs.Add("BETWEEN");
            hs.Add("BIGINT");
            hs.Add("BINARY");
            hs.Add("BIT");
            hs.Add("BIT_LENGTH");
            hs.Add("BLOB");
            hs.Add("BLOCKED");
            hs.Add("BOM");
            hs.Add("BOOLEAN");
            hs.Add("BOTH");
            hs.Add("BREADTH");
            hs.Add("BY");
            hs.Add("C");
            hs.Add("CACHE");
            hs.Add("CALL");
            hs.Add("CALLED");
            hs.Add("CARDINALITY");
            hs.Add("CASCADE");
            hs.Add("CASCADED");
            hs.Add("CASE");
            hs.Add("CAST");
            hs.Add("CATALOG");
            hs.Add("CATALOG_NAME");
            hs.Add("CEIL");
            hs.Add("CEILING");
            hs.Add("CHAIN");
            hs.Add("CHAINING");
            hs.Add("CHAR");
            hs.Add("CHARACTER");
            hs.Add("CHARACTERISTICS");
            hs.Add("CHARACTERS");
            hs.Add("CHARACTER_LENGTH");
            hs.Add("CHARACTER_​SET_​CATALOG");
            hs.Add("CHARACTER_SET_NAME");
            hs.Add("CHARACTER_SET_SCHEMA");
            hs.Add("CHAR_LENGTH");
            hs.Add("CHECK");
            hs.Add("CHECKPOINT");
            hs.Add("CLASS");
            hs.Add("CLASSIFIER");
            hs.Add("CLASS_ORIGIN");
            hs.Add("CLOB");
            hs.Add("CLOSE");
            hs.Add("CLUSTER");
            hs.Add("COALESCE");
            hs.Add("COBOL");
            hs.Add("COLLATE");
            hs.Add("COLLATION");
            hs.Add("COLLATION_CATALOG");
            hs.Add("COLLATION_NAME");
            hs.Add("COLLATION_SCHEMA");
            hs.Add("COLLECT");
            hs.Add("COLUMN");
            hs.Add("COLUMNS");
            hs.Add("COLUMN_NAME");
            hs.Add("COMMAND_FUNCTION");
            hs.Add("COMMAND_​FUNCTION_​CODE");
            hs.Add("COMMENT");
            hs.Add("COMMENTS");
            hs.Add("COMMIT");
            hs.Add("COMMITTED");
            hs.Add("CONCURRENTLY");
            hs.Add("CONDITION");
            hs.Add("CONDITIONAL");
            hs.Add("CONDITION_NUMBER");
            hs.Add("CONFIGURATION");
            hs.Add("CONFLICT");
            hs.Add("CONNECT");
            hs.Add("CONNECTION");
            hs.Add("CONNECTION_NAME");
            hs.Add("CONSTRAINT");
            hs.Add("CONSTRAINTS");
            hs.Add("CONSTRAINT_CATALOG");
            hs.Add("CONSTRAINT_NAME");
            hs.Add("CONSTRAINT_SCHEMA");
            hs.Add("CONSTRUCTOR");
            hs.Add("CONTAINS");
            hs.Add("CONTENT");
            hs.Add("CONTINUE");
            hs.Add("CONTROL");
            hs.Add("CONVERSION");
            hs.Add("CONVERT");
            hs.Add("COPY");
            hs.Add("CORR");
            hs.Add("CORRESPONDING");
            hs.Add("COS");
            hs.Add("COSH");
            hs.Add("COST");
            hs.Add("COUNT");
            hs.Add("COVAR_POP");
            hs.Add("COVAR_SAMP");
            hs.Add("CREATE");
            hs.Add("CROSS");
            hs.Add("CSV");
            hs.Add("CUBE");
            hs.Add("CUME_DIST");
            hs.Add("CURRENT");
            hs.Add("CURRENT_CATALOG");
            hs.Add("CURRENT_DATE");
            hs.Add("CURRENT_​DEFAULT_​TRANSFORM_​GROUP");
            hs.Add("CURRENT_PATH");
            hs.Add("CURRENT_ROLE");
            hs.Add("CURRENT_ROW");
            hs.Add("CURRENT_SCHEMA");
            hs.Add("CURRENT_TIME");
            hs.Add("CURRENT_TIMESTAMP");
            hs.Add("CURRENT_​TRANSFORM_​GROUP_​FOR_​TYPE");
            hs.Add("CURRENT_USER");
            hs.Add("CURSOR");
            hs.Add("CURSOR_NAME");
            hs.Add("CYCLE");
            hs.Add("DATA");
            hs.Add("DATABASE");
            hs.Add("DATALINK");
            hs.Add("DATE");
            hs.Add("DATETIME_​INTERVAL_​CODE");
            hs.Add("DATETIME_​INTERVAL_​PRECISION");
            hs.Add("DAY");
            hs.Add("DB");
            hs.Add("DEALLOCATE");
            hs.Add("DEC");
            hs.Add("DECFLOAT");
            hs.Add("DECIMAL");
            hs.Add("DECLARE");
            hs.Add("DEFAULT");
            hs.Add("DEFAULTS");
            hs.Add("DEFERRABLE");
            hs.Add("DEFERRED");
            hs.Add("DEFINE");
            hs.Add("DEFINED");
            hs.Add("DEFINER");
            hs.Add("DEGREE");
            hs.Add("DELETE");
            hs.Add("DELIMITER");
            hs.Add("DELIMITERS");
            hs.Add("DENSE_RANK");
            hs.Add("DEPENDS");
            hs.Add("DEPTH");
            hs.Add("DEREF");
            hs.Add("DERIVED");
            hs.Add("DESC");
            hs.Add("DESCRIBE");
            hs.Add("DESCRIPTOR");
            hs.Add("DETACH");
            hs.Add("DETERMINISTIC");
            hs.Add("DIAGNOSTICS");
            hs.Add("DICTIONARY");
            hs.Add("DISABLE");
            hs.Add("DISCARD");
            hs.Add("DISCONNECT");
            hs.Add("DISPATCH");
            hs.Add("DISTINCT");
            hs.Add("DLNEWCOPY");
            hs.Add("DLPREVIOUSCOPY");
            hs.Add("DLURLCOMPLETE");
            hs.Add("DLURLCOMPLETEONLY");
            hs.Add("DLURLCOMPLETEWRITE");
            hs.Add("DLURLPATH");
            hs.Add("DLURLPATHONLY");
            hs.Add("DLURLPATHWRITE");
            hs.Add("DLURLSCHEME");
            hs.Add("DLURLSERVER");
            hs.Add("DLVALUE");
            hs.Add("DO");
            hs.Add("DOCUMENT");
            hs.Add("DOMAIN");
            hs.Add("DOUBLE");
            hs.Add("DROP");
            hs.Add("DYNAMIC");
            hs.Add("DYNAMIC_FUNCTION");
            hs.Add("DYNAMIC_​FUNCTION_​CODE");
            hs.Add("EACH");
            hs.Add("ELEMENT");
            hs.Add("ELSE");
            hs.Add("EMPTY");
            hs.Add("ENABLE");
            hs.Add("ENCODING");
            hs.Add("ENCRYPTED");
            hs.Add("END");
            hs.Add("END-EXEC");
            hs.Add("END_FRAME");
            hs.Add("END_PARTITION");
            hs.Add("ENFORCED");
            hs.Add("ENUM");
            hs.Add("EQUALS");
            hs.Add("ERROR");
            hs.Add("ESCAPE");
            hs.Add("EVENT");
            hs.Add("EVERY");
            hs.Add("EXCEPT");
            hs.Add("EXCEPTION");
            hs.Add("EXCLUDE");
            hs.Add("EXCLUDING");
            hs.Add("EXCLUSIVE");
            hs.Add("EXEC");
            hs.Add("EXECUTE");
            hs.Add("EXISTS");
            hs.Add("EXP");
            hs.Add("EXPLAIN");
            hs.Add("EXPRESSION");
            hs.Add("EXTENSION");
            hs.Add("EXTERNAL");
            hs.Add("EXTRACT");
            hs.Add("FALSE");
            hs.Add("FAMILY");
            hs.Add("FETCH");
            hs.Add("FILE");
            hs.Add("FILTER");
            hs.Add("FINAL");
            hs.Add("FINISH");
            hs.Add("FIRST");
            hs.Add("FIRST_VALUE");
            hs.Add("FLAG");
            hs.Add("FLOAT");
            hs.Add("FLOOR");
            hs.Add("FOLLOWING");
            hs.Add("FOR");
            hs.Add("FORCE");
            hs.Add("FOREIGN");
            hs.Add("FORMAT");
            hs.Add("FORTRAN");
            hs.Add("FORWARD");
            hs.Add("FOUND");
            hs.Add("FRAME_ROW");
            hs.Add("FREE");
            hs.Add("FREEZE");
            hs.Add("FROM");
            hs.Add("FS");
            hs.Add("FULFILL");
            hs.Add("FULL");
            hs.Add("FUNCTION");
            hs.Add("FUNCTIONS");
            hs.Add("FUSION");
            hs.Add("G");
            hs.Add("GENERAL");
            hs.Add("GENERATED");
            hs.Add("GET");
            hs.Add("GLOBAL");
            hs.Add("GO");
            hs.Add("GOTO");
            hs.Add("GRANT");
            hs.Add("GRANTED");
            hs.Add("GREATEST");
            hs.Add("GROUP");
            hs.Add("GROUPING");
            hs.Add("GROUPS");
            hs.Add("HANDLER");
            hs.Add("HAVING");
            hs.Add("HEADER");
            hs.Add("HEX");
            hs.Add("HIERARCHY");
            hs.Add("HOLD");
            hs.Add("HOUR");
            hs.Add("ID");
            hs.Add("IDENTITY");
            hs.Add("IF");
            hs.Add("IGNORE");
            hs.Add("ILIKE");
            hs.Add("IMMEDIATE");
            hs.Add("IMMEDIATELY");
            hs.Add("IMMUTABLE");
            hs.Add("IMPLEMENTATION");
            hs.Add("IMPLICIT");
            hs.Add("IMPORT");
            hs.Add("IN");
            hs.Add("INCLUDE");
            hs.Add("INCLUDING");
            hs.Add("INCREMENT");
            hs.Add("INDENT");
            hs.Add("INDEX");
            hs.Add("INDEXES");
            hs.Add("INDICATOR");
            hs.Add("INHERIT");
            hs.Add("INHERITS");
            hs.Add("INITIAL");
            hs.Add("INITIALLY");
            hs.Add("INLINE");
            hs.Add("INNER");
            hs.Add("INOUT");
            hs.Add("INPUT");
            hs.Add("INSENSITIVE");
            hs.Add("INSERT");
            hs.Add("INSTANCE");
            hs.Add("INSTANTIABLE");
            hs.Add("INSTEAD");
            hs.Add("INT");
            hs.Add("INTEGER");
            hs.Add("INTEGRITY");
            hs.Add("INTERSECT");
            hs.Add("INTERSECTION");
            hs.Add("INTERVAL");
            hs.Add("INTO");
            hs.Add("INVOKER");
            hs.Add("IS");
            hs.Add("ISNULL");
            hs.Add("ISOLATION");
            hs.Add("JOIN");
            hs.Add("JSON");
            hs.Add("JSON_ARRAY");
            hs.Add("JSON_ARRAYAGG");
            hs.Add("JSON_EXISTS");
            hs.Add("JSON_OBJECT");
            hs.Add("JSON_OBJECTAGG");
            hs.Add("JSON_QUERY");
            hs.Add("JSON_TABLE");
            hs.Add("JSON_TABLE_PRIMITIVE");
            hs.Add("JSON_VALUE");
            hs.Add("K");
            hs.Add("KEEP");
            hs.Add("KEY");
            hs.Add("KEYS");
            hs.Add("KEY_MEMBER");
            hs.Add("KEY_TYPE");
            hs.Add("LABEL");
            hs.Add("LAG");
            hs.Add("LANGUAGE");
            hs.Add("LARGE");
            hs.Add("LAST");
            hs.Add("LAST_VALUE");
            hs.Add("LATERAL");
            hs.Add("LEAD");
            hs.Add("LEADING");
            hs.Add("LEAKPROOF");
            hs.Add("LEAST");
            hs.Add("LEFT");
            hs.Add("LENGTH");
            hs.Add("LEVEL");
            hs.Add("LIBRARY");
            hs.Add("LIKE");
            hs.Add("LIKE_REGEX");
            hs.Add("LIMIT");
            hs.Add("LINK");
            hs.Add("LISTAGG");
            hs.Add("LISTEN");
            hs.Add("LN");
            hs.Add("LOAD");
            hs.Add("LOCAL");
            hs.Add("LOCALTIME");
            hs.Add("LOCALTIMESTAMP");
            hs.Add("LOCATION");
            hs.Add("LOCATOR");
            hs.Add("LOCK");
            hs.Add("LOCKED");
            hs.Add("LOG");
            hs.Add("LOG10");
            hs.Add("LOGGED");
            hs.Add("LOWER");
            hs.Add("M");
            hs.Add("MAP");
            hs.Add("MAPPING");
            hs.Add("MATCH");
            hs.Add("MATCHED");
            hs.Add("MATCHES");
            hs.Add("MATCH_NUMBER");
            hs.Add("MATCH_RECOGNIZE");
            hs.Add("MATERIALIZED");
            hs.Add("MAX");
            hs.Add("MAXVALUE");
            hs.Add("MEASURES");
            hs.Add("MEMBER");
            hs.Add("MERGE");
            hs.Add("MESSAGE_LENGTH");
            hs.Add("MESSAGE_OCTET_LENGTH");
            hs.Add("MESSAGE_TEXT");
            hs.Add("METHOD");
            hs.Add("MIN");
            hs.Add("MINUTE");
            hs.Add("MINVALUE");
            hs.Add("MOD");
            hs.Add("MODE");
            hs.Add("MODIFIES");
            hs.Add("MODULE");
            hs.Add("MONTH");
            hs.Add("MORE");
            hs.Add("MOVE");
            hs.Add("MULTISET");
            hs.Add("MUMPS");
            hs.Add("NAME");
            hs.Add("NAMES");
            hs.Add("NAMESPACE");
            hs.Add("NATIONAL");
            hs.Add("NATURAL");
            hs.Add("NCHAR");
            hs.Add("NCLOB");
            hs.Add("NESTED");
            hs.Add("NESTING");
            hs.Add("NEW");
            hs.Add("NEXT");
            hs.Add("NFC");
            hs.Add("NFD");
            hs.Add("NFKC");
            hs.Add("NFKD");
            hs.Add("NIL");
            hs.Add("NO");
            hs.Add("NONE");
            hs.Add("NORMALIZE");
            hs.Add("NORMALIZED");
            hs.Add("NOT");
            hs.Add("NOTHING");
            hs.Add("NOTIFY");
            hs.Add("NOTNULL");
            hs.Add("NOWAIT");
            hs.Add("NTH_VALUE");
            hs.Add("NTILE");
            hs.Add("NULL");
            hs.Add("NULLABLE");
            hs.Add("NULLIF");
            hs.Add("NULLS");
            hs.Add("NUMBER");
            hs.Add("NUMERIC");
            hs.Add("OBJECT");
            hs.Add("OCCURRENCES_REGEX");
            hs.Add("OCTETS");
            hs.Add("OCTET_LENGTH");
            hs.Add("OF");
            hs.Add("OFF");
            hs.Add("OFFSET");
            hs.Add("OIDS");
            hs.Add("OLD");
            hs.Add("OMIT");
            hs.Add("ON");
            hs.Add("ONE");
            hs.Add("ONLY");
            hs.Add("OPEN");
            hs.Add("OPERATOR");
            hs.Add("OPTION");
            hs.Add("OPTIONS");
            hs.Add("OR");
            hs.Add("ORDER");
            hs.Add("ORDERING");
            hs.Add("ORDINALITY");
            hs.Add("OTHERS");
            hs.Add("OUT");
            hs.Add("OUTER");
            hs.Add("OUTPUT");
            hs.Add("OVER");
            hs.Add("OVERFLOW");
            hs.Add("OVERLAPS");
            hs.Add("OVERLAY");
            hs.Add("OVERRIDING");
            hs.Add("OWNED");
            hs.Add("OWNER");
            hs.Add("P");
            hs.Add("PAD");
            hs.Add("PARALLEL");
            hs.Add("PARAMETER");
            hs.Add("PARAMETER_MODE");
            hs.Add("PARAMETER_NAME");
            hs.Add("PARAMETER_​ORDINAL_​POSITION");
            hs.Add("PARAMETER_​SPECIFIC_​CATALOG");
            hs.Add("PARAMETER_​SPECIFIC_​NAME");
            hs.Add("PARAMETER_​SPECIFIC_​SCHEMA");
            hs.Add("PARSER");
            hs.Add("PARTIAL");
            hs.Add("PARTITION");
            hs.Add("PASCAL");
            hs.Add("PASS");
            hs.Add("PASSING");
            hs.Add("PASSTHROUGH");
            hs.Add("PASSWORD");
            hs.Add("PAST");
            hs.Add("PATH");
            hs.Add("PATTERN");
            hs.Add("PER");
            hs.Add("PERCENT");
            hs.Add("PERCENTILE_CONT");
            hs.Add("PERCENTILE_DISC");
            hs.Add("PERCENT_RANK");
            hs.Add("PERIOD");
            hs.Add("PERMISSION");
            hs.Add("PERMUTE");
            hs.Add("PLACING");
            hs.Add("PLAN");
            hs.Add("PLANS");
            hs.Add("PLI");
            hs.Add("POLICY");
            hs.Add("PORTION");
            hs.Add("POSITION");
            hs.Add("POSITION_REGEX");
            hs.Add("POWER");
            hs.Add("PRECEDES");
            hs.Add("PRECEDING");
            hs.Add("PRECISION");
            hs.Add("PREPARE");
            hs.Add("PREPARED");
            hs.Add("PRESERVE");
            hs.Add("PRIMARY");
            hs.Add("PRIOR");
            hs.Add("PRIVATE");
            hs.Add("PRIVILEGES");
            hs.Add("PROCEDURAL");
            hs.Add("PROCEDURE");
            hs.Add("PROCEDURES");
            hs.Add("PROGRAM");
            hs.Add("PRUNE");
            hs.Add("PTF");
            hs.Add("PUBLIC");
            hs.Add("PUBLICATION");
            hs.Add("QUOTE");
            hs.Add("QUOTES");
            hs.Add("RANGE");
            hs.Add("RANK");
            hs.Add("READ");
            hs.Add("READS");
            hs.Add("REAL");
            hs.Add("REASSIGN");
            hs.Add("RECHECK");
            hs.Add("RECOVERY");
            hs.Add("RECURSIVE");
            hs.Add("REF");
            hs.Add("REFERENCES");
            hs.Add("REFERENCING");
            hs.Add("REFRESH");
            hs.Add("REGR_AVGX");
            hs.Add("REGR_AVGY");
            hs.Add("REGR_COUNT");
            hs.Add("REGR_INTERCEPT");
            hs.Add("REGR_R2");
            hs.Add("REGR_SLOPE");
            hs.Add("REGR_SXX");
            hs.Add("REGR_SXY");
            hs.Add("REGR_SYY");
            hs.Add("REINDEX");
            hs.Add("RELATIVE");
            hs.Add("RELEASE");
            hs.Add("RENAME");
            hs.Add("REPEATABLE");
            hs.Add("REPLACE");
            hs.Add("REPLICA");
            hs.Add("REQUIRING");
            hs.Add("RESET");
            hs.Add("RESPECT");
            hs.Add("RESTART");
            hs.Add("RESTORE");
            hs.Add("RESTRICT");
            hs.Add("RESULT");
            hs.Add("RETURN");
            hs.Add("RETURNED_CARDINALITY");
            hs.Add("RETURNED_LENGTH");
            hs.Add("RETURNED_​OCTET_​LENGTH");
            hs.Add("RETURNED_SQLSTATE");
            hs.Add("RETURNING");
            hs.Add("RETURNS");
            hs.Add("REVOKE");
            hs.Add("RIGHT");
            hs.Add("ROLE");
            hs.Add("ROLLBACK");
            hs.Add("ROLLUP");
            hs.Add("ROUTINE");
            hs.Add("ROUTINES");
            hs.Add("ROUTINE_CATALOG");
            hs.Add("ROUTINE_NAME");
            hs.Add("ROUTINE_SCHEMA");
            hs.Add("ROW");
            hs.Add("ROWS");
            hs.Add("ROW_COUNT");
            hs.Add("ROW_NUMBER");
            hs.Add("RULE");
            hs.Add("RUNNING");
            hs.Add("SAVEPOINT");
            hs.Add("SCALAR");
            hs.Add("SCALE");
            hs.Add("SCHEMA");
            hs.Add("SCHEMAS");
            hs.Add("SCHEMA_NAME");
            hs.Add("SCOPE");
            hs.Add("SCOPE_CATALOG");
            hs.Add("SCOPE_NAME");
            hs.Add("SCOPE_SCHEMA");
            hs.Add("SCROLL");
            hs.Add("SEARCH");
            hs.Add("SECOND");
            hs.Add("SECTION");
            hs.Add("SECURITY");
            hs.Add("SEEK");
            hs.Add("SELECT");
            hs.Add("SELECTIVE");
            hs.Add("SELF");
            hs.Add("SENSITIVE");
            hs.Add("SEQUENCE");
            hs.Add("SEQUENCES");
            hs.Add("SERIALIZABLE");
            hs.Add("SERVER");
            hs.Add("SERVER_NAME");
            hs.Add("SESSION");
            hs.Add("SESSION_USER");
            hs.Add("SET");
            hs.Add("SETOF");
            hs.Add("SETS");
            hs.Add("SHARE");
            hs.Add("SHOW");
            hs.Add("SIMILAR");
            hs.Add("SIMPLE");
            hs.Add("SIN");
            hs.Add("SINH");
            hs.Add("SIZE");
            hs.Add("SKIP");
            hs.Add("SMALLINT");
            hs.Add("SNAPSHOT");
            hs.Add("SOME");
            hs.Add("SOURCE");
            hs.Add("SPACE");
            hs.Add("SPECIFIC");
            hs.Add("SPECIFICTYPE");
            hs.Add("SPECIFIC_NAME");
            hs.Add("SQL");
            hs.Add("SQLCODE");
            hs.Add("SQLERROR");
            hs.Add("SQLEXCEPTION");
            hs.Add("SQLSTATE");
            hs.Add("SQLWARNING");
            hs.Add("SQRT");
            hs.Add("STABLE");
            hs.Add("STANDALONE");
            hs.Add("START");
            hs.Add("STATE");
            hs.Add("STATEMENT");
            hs.Add("STATIC");
            hs.Add("STATISTICS");
            hs.Add("STDDEV_POP");
            hs.Add("STDDEV_SAMP");
            hs.Add("STDIN");
            hs.Add("STDOUT");
            hs.Add("STORAGE");
            hs.Add("STORED");
            hs.Add("STRICT");
            hs.Add("STRING");
            hs.Add("STRIP");
            hs.Add("STRUCTURE");
            hs.Add("STYLE");
            hs.Add("SUBCLASS_ORIGIN");
            hs.Add("SUBMULTISET");
            hs.Add("SUBSCRIPTION");
            hs.Add("SUBSET");
            hs.Add("SUBSTRING");
            hs.Add("SUBSTRING_REGEX");
            hs.Add("SUCCEEDS");
            hs.Add("SUM");
            hs.Add("SUPPORT");
            hs.Add("SYMMETRIC");
            hs.Add("SYSID");
            hs.Add("SYSTEM");
            hs.Add("SYSTEM_TIME");
            hs.Add("SYSTEM_USER");
            hs.Add("T");
            hs.Add("TABLE");
            hs.Add("TABLES");
            hs.Add("TABLESAMPLE");
            hs.Add("TABLESPACE");
            hs.Add("TABLE_NAME");
            hs.Add("TAN");
            hs.Add("TANH");
            hs.Add("TEMP");
            hs.Add("TEMPLATE");
            hs.Add("TEMPORARY");
            hs.Add("TEXT");
            hs.Add("THEN");
            hs.Add("THROUGH");
            hs.Add("TIES");
            hs.Add("TIME");
            hs.Add("TIMESTAMP");
            hs.Add("TIMEZONE_HOUR");
            hs.Add("TIMEZONE_MINUTE");
            hs.Add("TO");
            hs.Add("TOKEN");
            hs.Add("TOP_LEVEL_COUNT");
            hs.Add("TRAILING");
            hs.Add("TRANSACTION");
            hs.Add("TRANSACTIONS_​COMMITTED");
            hs.Add("TRANSACTIONS_​ROLLED_​BACK");
            hs.Add("TRANSACTION_ACTIVE");
            hs.Add("TRANSFORM");
            hs.Add("TRANSFORMS");
            hs.Add("TRANSLATE");
            hs.Add("TRANSLATE_REGEX");
            hs.Add("TRANSLATION");
            hs.Add("TREAT");
            hs.Add("TRIGGER");
            hs.Add("TRIGGER_CATALOG");
            hs.Add("TRIGGER_NAME");
            hs.Add("TRIGGER_SCHEMA");
            hs.Add("TRIM");
            hs.Add("TRIM_ARRAY");
            hs.Add("TRUE");
            hs.Add("TRUNCATE");
            hs.Add("TRUSTED");
            hs.Add("TYPE");
            hs.Add("TYPES");
            hs.Add("UESCAPE");
            hs.Add("UNBOUNDED");
            hs.Add("UNCOMMITTED");
            hs.Add("UNCONDITIONAL");
            hs.Add("UNDER");
            hs.Add("UNENCRYPTED");
            hs.Add("UNION");
            hs.Add("UNIQUE");
            hs.Add("UNKNOWN");
            hs.Add("UNLINK");
            hs.Add("UNLISTEN");
            hs.Add("UNLOGGED");
            hs.Add("UNMATCHED");
            hs.Add("UNNAMED");
            hs.Add("UNNEST");
            hs.Add("UNTIL");
            hs.Add("UNTYPED");
            hs.Add("UPDATE");
            hs.Add("UPPER");
            hs.Add("URI");
            hs.Add("USAGE");
            hs.Add("USER");
            hs.Add("USER_​DEFINED_​TYPE_​CATALOG");
            hs.Add("USER_​DEFINED_​TYPE_​CODE");
            hs.Add("USER_​DEFINED_​TYPE_​NAME");
            hs.Add("USER_​DEFINED_​TYPE_​SCHEMA");
            hs.Add("USING");
            hs.Add("UTF16");
            hs.Add("UTF32");
            hs.Add("UTF8");
            hs.Add("VACUUM");
            hs.Add("VALID");
            hs.Add("VALIDATE");
            hs.Add("VALIDATOR");
            hs.Add("VALUE");
            hs.Add("VALUES");
            hs.Add("VALUE_OF");
            hs.Add("VARBINARY");
            hs.Add("VARCHAR");
            hs.Add("VARIADIC");
            hs.Add("VARYING");
            hs.Add("VAR_POP");
            hs.Add("VAR_SAMP");
            hs.Add("VERBOSE");
            hs.Add("VERSION");
            hs.Add("VERSIONING");
            hs.Add("VIEW");
            hs.Add("VIEWS");
            hs.Add("VOLATILE");
            hs.Add("WHEN");
            hs.Add("WHENEVER");
            hs.Add("WHERE");
            hs.Add("WHITESPACE");
            hs.Add("WIDTH_BUCKET");
            hs.Add("WINDOW");
            hs.Add("WITH");
            hs.Add("WITHIN");
            hs.Add("WITHOUT");
            hs.Add("WORK");
            hs.Add("WRAPPER");
            hs.Add("WRITE");
            hs.Add("XML");
            hs.Add("XMLAGG");
            hs.Add("XMLATTRIBUTES");
            hs.Add("XMLBINARY");
            hs.Add("XMLCAST");
            hs.Add("XMLCOMMENT");
            hs.Add("XMLCONCAT");
            hs.Add("XMLDECLARATION");
            hs.Add("XMLDOCUMENT");
            hs.Add("XMLELEMENT");
            hs.Add("XMLEXISTS");
            hs.Add("XMLFOREST");
            hs.Add("XMLITERATE");
            hs.Add("XMLNAMESPACES");
            hs.Add("XMLPARSE");
            hs.Add("XMLPI");
            hs.Add("XMLQUERY");
            hs.Add("XMLROOT");
            hs.Add("XMLSCHEMA");
            hs.Add("XMLSERIALIZE");
            hs.Add("XMLTABLE");
            hs.Add("XMLTEXT");
            hs.Add("XMLVALIDATE");
            hs.Add("YEAR");
            hs.Add("YES");
            hs.Add("ZONE");

            return hs;
        }

        internal static System.Collections.Generic.HashSet<string> GetCurrentKeywords()
        {
            System.Collections.Generic.HashSet<string> hs = 
                new System.Collections.Generic.HashSet<string>(System.StringComparer.InvariantCultureIgnoreCase);

            // hs.Add("ADD");

            return hs;
        }

        internal static System.Collections.Generic.HashSet<string> GetOdbcKeywords()
        {
            System.Collections.Generic.HashSet<string> hs = 
                new System.Collections.Generic.HashSet<string>(System.StringComparer.InvariantCultureIgnoreCase);
            hs.Add("ABSOLUTE");
            hs.Add("ACTION");
            hs.Add("ADA");
            hs.Add("ADD");
            hs.Add("ALL");
            hs.Add("ALLOCATE");
            hs.Add("ALTER");
            hs.Add("AND");
            hs.Add("ANY");
            hs.Add("ARE");
            hs.Add("AS");
            hs.Add("ASC");
            hs.Add("ASSERTION");
            hs.Add("AT");
            hs.Add("AUTHORIZATION");
            hs.Add("AVG");
            hs.Add("BEGIN");
            hs.Add("BETWEEN");
            hs.Add("BIT");
            hs.Add("BIT_LENGTH");
            hs.Add("BOTH");
            hs.Add("BY");
            hs.Add("CASCADE");
            hs.Add("CASCADED");
            hs.Add("CASE");
            hs.Add("CAST");
            hs.Add("CATALOG");
            hs.Add("CHAR");
            hs.Add("CHAR_LENGTH");
            hs.Add("CHARACTER");
            hs.Add("CHARACTER_LENGTH");
            hs.Add("CHECK");
            hs.Add("CLOSE");
            hs.Add("COALESCE");
            hs.Add("COLLATE");
            hs.Add("COLLATION");
            hs.Add("COLUMN");
            hs.Add("COMMIT");
            hs.Add("CONNECT");
            hs.Add("CONNECTION");
            hs.Add("CONSTRAINT");
            hs.Add("CONSTRAINTS");
            hs.Add("CONTINUE");
            hs.Add("CONVERT");
            hs.Add("CORRESPONDING");
            hs.Add("COUNT");
            hs.Add("CREATE");
            hs.Add("CROSS");
            hs.Add("CURRENT");
            hs.Add("CURRENT_DATE");
            hs.Add("CURRENT_TIME");
            hs.Add("CURRENT_TIMESTAMP");
            hs.Add("CURRENT_USER");
            hs.Add("CURSOR");
            hs.Add("DATE");
            hs.Add("DAY");
            hs.Add("DEALLOCATE");
            hs.Add("DEC");
            hs.Add("DECIMAL");
            hs.Add("DECLARE");
            hs.Add("DEFAULT");
            hs.Add("DEFERRABLE");
            hs.Add("DEFERRED");
            hs.Add("DELETE");
            hs.Add("DESC");
            hs.Add("DESCRIBE");
            hs.Add("DESCRIPTOR");
            hs.Add("DIAGNOSTICS");
            hs.Add("DISCONNECT");
            hs.Add("DISTINCT");
            hs.Add("DOMAIN");
            hs.Add("DOUBLE");
            hs.Add("DROP");
            hs.Add("ELSE");
            hs.Add("END");
            hs.Add("END-EXEC");
            hs.Add("ESCAPE");
            hs.Add("EXCEPT");
            hs.Add("EXCEPTION");
            hs.Add("EXEC");
            hs.Add("EXECUTE");
            hs.Add("EXISTS");
            hs.Add("EXTERNAL");
            hs.Add("EXTRACT");
            hs.Add("FALSE");
            hs.Add("FETCH");
            hs.Add("FIRST");
            hs.Add("FLOAT");
            hs.Add("FOR");
            hs.Add("FOREIGN");
            hs.Add("FORTRAN");
            hs.Add("FOUND");
            hs.Add("FROM");
            hs.Add("FULL");
            hs.Add("GET");
            hs.Add("GLOBAL");
            hs.Add("GO");
            hs.Add("GOTO");
            hs.Add("GRANT");
            hs.Add("GROUP");
            hs.Add("HAVING");
            hs.Add("HOUR");
            hs.Add("IDENTITY");
            hs.Add("IMMEDIATE");
            hs.Add("IN");
            hs.Add("INCLUDE");
            hs.Add("INDEX");
            hs.Add("INDICATOR");
            hs.Add("INITIALLY");
            hs.Add("INNER");
            hs.Add("INPUT");
            hs.Add("INSENSITIVE");
            hs.Add("INSERT");
            hs.Add("INT");
            hs.Add("INTEGER");
            hs.Add("INTERSECT");
            hs.Add("INTERVAL");
            hs.Add("INTO");
            hs.Add("IS");
            hs.Add("ISOLATION");
            hs.Add("JOIN");
            hs.Add("KEY");
            hs.Add("LANGUAGE");
            hs.Add("LAST");
            hs.Add("LEADING");
            hs.Add("LEFT");
            hs.Add("LEVEL");
            hs.Add("LIKE");
            hs.Add("LOCAL");
            hs.Add("LOWER");
            hs.Add("MATCH");
            hs.Add("MAX");
            hs.Add("MIN");
            hs.Add("MINUTE");
            hs.Add("MODULE");
            hs.Add("MONTH");
            hs.Add("NAMES");
            hs.Add("NATIONAL");
            hs.Add("NATURAL");
            hs.Add("NCHAR");
            hs.Add("NEXT");
            hs.Add("NO");
            hs.Add("NONE");
            hs.Add("NOT");
            hs.Add("NULL");
            hs.Add("NULLIF");
            hs.Add("NUMERIC");
            hs.Add("OCTET_LENGTH");
            hs.Add("OF");
            hs.Add("ON");
            hs.Add("ONLY");
            hs.Add("OPEN");
            hs.Add("OPTION");
            hs.Add("OR");
            hs.Add("ORDER");
            hs.Add("OUTER");
            hs.Add("OUTPUT");
            hs.Add("OVERLAPS");
            hs.Add("PAD");
            hs.Add("PARTIAL");
            hs.Add("PASCAL");
            hs.Add("POSITION");
            hs.Add("PRECISION");
            hs.Add("PREPARE");
            hs.Add("PRESERVE");
            hs.Add("PRIMARY");
            hs.Add("PRIOR");
            hs.Add("PRIVILEGES");
            hs.Add("PROCEDURE");
            hs.Add("PUBLIC");
            hs.Add("READ");
            hs.Add("REAL");
            hs.Add("REFERENCES");
            hs.Add("RELATIVE");
            hs.Add("RESTRICT");
            hs.Add("REVOKE");
            hs.Add("RIGHT");
            hs.Add("ROLLBACK");
            hs.Add("ROWS");
            hs.Add("SCHEMA");
            hs.Add("SCROLL");
            hs.Add("SECOND");
            hs.Add("SECTION");
            hs.Add("SELECT");
            hs.Add("SESSION");
            hs.Add("SESSION_USER");
            hs.Add("SET");
            hs.Add("SIZE");
            hs.Add("SMALLINT");
            hs.Add("SOME");
            hs.Add("SPACE");
            hs.Add("SQL");
            hs.Add("SQLCA");
            hs.Add("SQLCODE");
            hs.Add("SQLERROR");
            hs.Add("SQLSTATE");
            hs.Add("SQLWARNING");
            hs.Add("SUBSTRING");
            hs.Add("SUM");
            hs.Add("SYSTEM_USER");
            hs.Add("TABLE");
            hs.Add("TEMPORARY");
            hs.Add("THEN");
            hs.Add("TIME");
            hs.Add("TIMESTAMP");
            hs.Add("TIMEZONE_HOUR");
            hs.Add("TIMEZONE_MINUTE");
            hs.Add("TO");
            hs.Add("TRAILING");
            hs.Add("TRANSACTION");
            hs.Add("TRANSLATE");
            hs.Add("TRANSLATION");
            hs.Add("TRIM");
            hs.Add("TRUE");
            hs.Add("UNION");
            hs.Add("UNIQUE");
            hs.Add("UNKNOWN");
            hs.Add("UPDATE");
            hs.Add("UPPER");
            hs.Add("USAGE");
            hs.Add("USER");
            hs.Add("USING");
            hs.Add("VALUE");
            hs.Add("VALUES");
            hs.Add("VARCHAR");
            hs.Add("VARYING");
            hs.Add("VIEW");
            hs.Add("WHEN");
            hs.Add("WHENEVER");
            hs.Add("WHERE");
            hs.Add("WITH");
            hs.Add("WORK");
            hs.Add("WRITE");
            hs.Add("YEAR");
            hs.Add("ZONE");

            return hs;
        }


        internal static System.Collections.Generic.HashSet<string> GetFutureKeywords()
        {
            System.Collections.Generic.HashSet<string> hs = 
                new System.Collections.Generic.HashSet<string>(System.StringComparer.InvariantCultureIgnoreCase);

            // hs.Add("ABSOLUTE");
            
            return hs;
        }



    }
}
